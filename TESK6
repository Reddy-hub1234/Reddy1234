#sudo apt-get update
#sudo apt-get upgrade
#sudo apt-get install python3-pip python3-opencv libopencv-dev
#sudo pip3 install numpy
#sudo pip3 install tensorflow
#sudo pip3 install torch torchvision
import cv2
cap = cv2.VideoCapture(0)  
while True:
    ret, frame = cap.read()
    if not ret:
        break
    cv2.imshow('Live Feed', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
def detect_license_plates(frame):
    height, width, channels = frame.shape
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)
    class_ids = []
    confidences = []
    boxes = []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
    return boxes, confidences, indexes
# Load your CRNN model here
def recognize_characters(plate_image):
    # Process the plate_image using the CRNN model to recognize characters
    recognized_text = "ABC123"  # Replace with actual recognition code
    return recognized_text
while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    boxes, confidences, indexes = detect_license_plates(frame)
    for i in range(len(boxes)):
        if i in indexes:
            x, y, w, h = boxes[i]
            plate_image = frame[y:y+h, x:x+w]
            recognized_text = recognize_characters(plate_image)
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(frame, recognized_text, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (36,255,12), 2)
    
    cv2.imshow('License Plate Recognition', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
recognized_plates = []

def store_recognized_data(recognized_text):
    recognized_plates.append(recognized_text)
    with open("recognized_plates.txt", "a") as file:
        file.write(recognized_text + "\n")
import tkinter as tk

root = tk.Tk()
root.title("Recognized License Plates")

listbox = tk.Listbox(root)
listbox.pack(fill=tk.BOTH, expand=True)

def update_listbox():
    listbox.delete(0, tk.END)
    for plate in recognized_plates:
        listbox.insert(tk.END, plate)
    root.after(1000, update_listbox)

update_listbox()
root.mainloop()
